[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-coaching-backend"
version = "0.1.0"
description = "AI-powered coaching management system backend using PydanticAI"
authors = [
    {name = "AI Coaching Team", email = "team@aicoaching.com"}
]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # PydanticAI and core dependencies
    "pydantic-ai>=0.0.13",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.2.0",
    
    # FastAPI for REST API
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.29.0",
    
    # Database and vector search
    "supabase>=2.4.0",
    "asyncpg>=0.29.0",
    "pgvector>=0.2.0",
    
    # AI/ML dependencies
    "openai>=1.35.0",
    "anthropic>=0.25.0",
    
    # External integrations
    "airtable-python-wrapper>=0.15.3",
    "google-api-python-client>=2.130.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.0",
    
    # Utilities
    "httpx>=0.27.0",
    "python-multipart>=0.0.9",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "structlog>=24.1.0",
    "tenacity>=8.2.0",
    "cryptography>=42.0.0",
    
    # Data processing
    "pandas>=2.2.0",
    "numpy>=1.26.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.0",  # For testing FastAPI
    
    # Code quality
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "black>=24.4.0",
    
    # Development tools
    "pre-commit>=3.7.0",
    "ipython>=8.24.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/user/AI_Coaching"
Repository = "https://github.com/user/AI_Coaching.git"
Issues = "https://github.com/user/AI_Coaching/issues"

[tool.ruff]
target-version = "py312"
line-length = 100
select = ["E", "F", "I", "N", "UP", "S", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "ISC", "G", "PIE", "T20", "Q", "RSE", "RET", "SIM", "TCH", "ARG", "PTH", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "S104", "S108", "PLR0913", "PLR0912", "PLR0915"]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "ARG001"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = "airtable.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "supabase.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]